version: '3.7'

services:
  # Elasticsearch Docker Images: https://www.docker.elastic.co/
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.11.0
    container_name: elasticsearch
    environment:
      - node.name=BW_node
      - discovery.type=single-node
      - bootstrap.memory_lock=true          # dev
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"    # dev
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - data01:/usr/share/elasticsearch/data
    cap_add:
      - IPC_LOCK
    ports:
      - 9200:9200
      - 9300:9300
    networks:
      backend:
        ipv4_address: ${IPV4_ELASTICSEARCH} 

  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:7.11.0
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - 5601:5601
    links:
      - elasticsearch
    networks:
      backend:
        ipv4_address: ${IPV4_KIBANA}

  grafana:
    container_name: grafana
    image: grafana/grafana:7.4.0
    ports:
      - 3000:3000
    volumes:
      - ./docker/datasources/:/etc/grafana/provisioning/datasources/
      - ./docker/dashboards/:/etc/grafana/provisioning/dashboards/
      - ./docker/dashboards/json:/etc/dashboards/
    depends_on: 
      - elasticsearch
    networks:
      backend:
        ipv4_address: ${IPV4_GRAFANA}

  ubuntu:
    container_name: ubuntu_server
    image: ubuntu_server
    build:
      context: .
      dockerfile: ./docker/Dockerfile.ubuntu
    ports:
      - 5678:5678
      - 80:80
    volumes:
      - ./src/ubuntu/:/usr/src/ubuntu/
    entrypoint: [ "python3", "-m", "debugpy", "--listen", "${IPV4_PYTHON_SERVER}:5678", "./APITest.py"]
    # entrypoint: [ "python3", "-m", "debugpy", "--listen", "${IPV4_PYTHON_SERVER}:5678", "--wait-for-client", "./APITest.py"]
    # command: "python3 -m debugpy --listen ${IPV4_PYTHON_SERVER}:5678 --wait-for-client ./main.py"
    stdin_open: true
    tty: true
    networks:
      backend:
        ipv4_address: ${IPV4_PYTHON_SERVER}

#  python:
#    container_name: python_run
#    image: python_run
#    build: 
#      context: .
#      dockerfile: ./docker/Dockerfile.py
#    networks: 
#      backend:
#        ipv4_address: 172.20.0.7


volumes:
  data01:
    driver: local

networks:
  backend:
    ipam:
      config:
        - subnet: 172.20.0.0/24
