version: '3.7'

services:
  # Elasticsearch Docker Images: https://www.docker.elastic.co/
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.11.0
    container_name: elasticsearch
    environment:
      - node.name=BW_node
      - discovery.type=single-node
      - bootstrap.memory_lock=true          # dev
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"    # dev
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - data01:/usr/share/elasticsearch/data
    cap_add:
      - IPC_LOCK
    ports:
      - ${PORT_ELASTIC_1}:${PORT_ELASTIC_1}
      - ${PORT_ELASTIC_2}:${PORT_ELASTIC_2}
    networks:
      backend:
        ipv4_address: ${IPV4_ELASTICSEARCH} 

  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:7.11.0
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:${PORT_ELASTIC_1}
    ports:
      - ${PORT_KIBANA}:${PORT_KIBANA}
    links:
      - elasticsearch
    networks:
      backend:
        ipv4_address: ${IPV4_KIBANA}

  logstash:
    container_name: logstash
    image: logstash
    build:
      context: .
      dockerfile: ./docker/Dockerfile.logstash
    env_file:
     - ./.env
    ports:
      - ${PORT_LOGSTASH}:${PORT_LOGSTASH}
    # volumes:
      ###### - ./docker/pipline/:/usr/share/logstash/pipeline
      # - ./docker/logstash/:/home/logs/
    depends_on: 
     - elasticsearch
    networks:
      backend:
        ipv4_address: ${IPV4_LOGSTASH}

  grafana:
    container_name: grafana
    image: grafana
    build:
      context: .
      dockerfile: ./docker/Dockerfile.grafana
    ports:
      - ${PORT_GRAFANA}:${PORT_GRAFANA}
    env_file:
     - ./.env
    # volumes:
      # - ./docker/datasources/:/etc/grafana/provisioning/datasources/
      # - ./docker/dashboards/:/etc/grafana/provisioning/dashboards/
      # - ./docker/dashboards/json:/etc/dashboards/
    depends_on: 
      - elasticsearch
    networks:
      backend:
        ipv4_address: ${IPV4_GRAFANA}

  ubuntu:
    container_name: ubuntu_server
    image: ubuntu_server
    build:
      context: .
      dockerfile: ./docker/Dockerfile.ubuntu
    environment: 
      - PORT_API=${PORT_API}
      - IPV4_ADRR=${IPV4_PYTHON_SERVER}
    ports:
      - ${PORT_DEV_REMOTE_DEBUG}:${PORT_DEV_REMOTE_DEBUG}
      - ${PORT_API}:${PORT_API}
    # volumes:
      # - ${localWorkspaceFolder}/src/ubuntu/:/usr/src/ubuntu/
      # - ${HOST_PROJECT_PATH}/src/ubuntu/:/usr/src/ubuntu/
      # - ./src/ubuntu/:/usr/src/ubuntu/
    entrypoint: [ "python3", "-m", "debugpy", "--listen",
     "${IPV4_PYTHON_SERVER}:${PORT_DEV_REMOTE_DEBUG}", "./main.py"]
    # entrypoint: [ "python3", "-m", "debugpy", "--listen", "${IPV4_PYTHON_SERVER}:5678", "--wait-for-client", "./main.py"]
    # command: "python3 -m debugpy --listen ${IPV4_PYTHON_SERVER}:5678 --wait-for-client ./main.py"
    stdin_open: true
    tty: true
    networks:
      backend:
        ipv4_address: ${IPV4_PYTHON_SERVER}

#  python:
#    container_name: python_run
#    image: python_run
#    build: 
#      context: .
#      dockerfile: ./docker/Dockerfile.py
#    networks: 
#      backend:
#        ipv4_address: 172.20.0.8


volumes:
  data01:
    driver: local

networks:
  backend:
    ipam:
      config:
        - subnet: ${IPV4_SUBNET}
          gateway: ${IPV4_GATEWAY}
